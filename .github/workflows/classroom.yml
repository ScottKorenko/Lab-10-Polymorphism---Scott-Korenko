name: GitHub Classroom Workflow

on:
  push:
    branches:
      - 'main'
      - '!badges'
  # 'pull_request_target' allows this Action to also run on forked repositories
  # The output will be shown in PR comments (unless the 'force_console_print' flag is used)
  workflow_dispatch:
jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      # add id to action so outputs can be used
      - uses: DrErickson/autograding@v2.1.1
        id: autograder
        continue-on-error: true

      # make dir for badges
      - name: badges branch and make dir
        run: |
          git checkout badges 2>/dev/null || git checkout -b badges
          mkdir -p .github/badges

      # make points badge
      - name: points badge
        uses: emibcn/badge-action@v2.0.2
        with:
          LABEL: 'Points'
          STATUS: ${{ steps.autograder.outputs.points }}
          COLOR: cyan
          path: '.github/badges/points.svg'

      - name: Upload badge as artifact
        uses: actions/upload-artifact@v3
        with:
          name: badge
          path: '.github/badges/points.svg'
          if-no-files-found: error

      # commit and push badge if score has changed
      - name: Commit badge
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '.github/badges/points.svg'
          git commit -m "Add/Update badge"
        continue-on-error: true
      - name: Push badge commit
        uses: ad-m/github-push-action@master
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: badges
          force: true
      - name: Check on failures
        if: steps.autograder.outcome == 'failure'
        run: echo "Not all tests in DrErickson/autograding@v2.1.1 passed" && exit 1

  # static_analysis:
  #   runs-on: ubuntu-latest
  #   name: Static Analysis
  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: setup init_script
  #     shell: bash
  #     run: |
  #       echo "#!/bin/bash

  #       # Input args provided by StaticAnalysis action
  #       root_dir=\${1}
  #       build_dir=\${2}
  #       echo \"Hello from the init script! First arg=\${root_dir} second arg=\${build_dir}\"

  #       add-apt-repository ppa:oibaf/graphics-drivers
  #       apt update && apt -y upgrade
  #       apt install -y libvulkan1 mesa-vulkan-drivers vulkan-tools" > init_script.sh

  #   - name: Run static analysis
  #     uses: JacobDomagala/StaticAnalysis@master
  #     with:
  #       # Exclude any issues found in ${Project_root_dir}/lib
  #       exclude_dir: include tests build

  #       use_cmake: true

  #       # Additional apt packages that need to be installed before running Cmake
  #       apt_pckgs: software-properties-common libglu1-mesa-dev freeglut3-dev mesa-common-dev

  #       # Additional script that will be run (sourced) AFTER 'apt_pckgs' and before running Cmake
  #       init_script: init_script.sh

  #       # (Optional) clang-tidy args
  #       clang_tidy_args: -checks='*,fuchsia-*,google-*,zircon-*,abseil-*,modernize-use-trailing-return-type'

  #       # (Optional) cppcheck args
  #       cppcheck_args: --enable=all --suppress=missingInclude
